@charset "utf-8";

// 폰트 출력 믹스인
@mixin font-family($type: null){
    @if($type == 'common'){
        font-family: $fonts-face-custom-regular, $fonts-face-default;
    }@else if($type == 'light'){
        font-family: $fonts-face-custom-light;
    }@else if($type == 'regular'){ //국문 regualr,  영문 book-regular
        font-family: $fonts-face-custom-regular;
    }@else if($type == 'kr-regular'){ // 국문 regular
        font-family: $fonts-face-custom-kr-regular;
    }@else if($type == 'en-regular'){ // 영문 book-regular
        font-family: $fonts-face-custom-en-regular;
    }@else if($type == 'en-x-regular'){ // 영문 original regular
        font-family: $fonts-face-custom-en-x-regular;
    }@else if($type == 'en-x-kr-regular'){ // 영문 original regular, 국문 regular
        font-family: $fonts-face-custom-en-x-regular, $fonts-face-custom-kr-regular;
    }@else if($type == 'lgt-regular'){ // 영문 light, 국문 regular
        font-family: $fonts-face-custom-lgt-regular;
    }@else if($type == 'reg-smbold'){ // 영문 original regular, 국문 semibold
        font-family: $fonts-face-custom-en-x-regular, $fonts-face-custom-smbold;
    }@else if($type == 'smbold'){ // 국문 semi bold
        font-family: $fonts-face-custom-smbold;
    }@else if($type == 'bold'){
        font-family: $fonts-face-custom-bold;
    }@else if($type == 'kr-bold'){
        font-family: $fonts-face-custom-kr-bold;
    }@else if($type == 'reg-bold'){
        font-family: $fonts-face-custom-en-x-regular, $fonts-face-custom-kr-bold;
    }@else if($type=='default'){
        font-family: $fonts-face-default;
    }@else{
        // none value;
    }
}

///
/// **Font style**
///  Mixin to put a font-size and its correct line-height in rems (with fallback in px) into an element.
///
/// @param {Value}	font-face-type 정의, 기본타입은  common이고 디자인에 따라 light, regular, bold를 선택한다.
/// @param {Value}	$size-value, 단위는 px, 생략 가능
/// @param {Value}	$line-height(폰트 사이즈의 상대적 비율), 생략 가능
/// @param {Value}	$color 폰트 컬러, hexCode로 지정
/// @group fonts
///


@mixin font($type:null, $font-size: null, $line-height:null, $color:null, $alpha:null){
    //font-type
    @if($type != null and $type !=''){
        @include font-family($type);
    }
    //font-size 적용
    @if($font-size != null and $font-size != ''){
        @if( length($font-size) > 1 ) {
            $font-size-change-unit: nth($font-size, 2);
            //@warn '두번째 인자 들어오는 경우:' $font-size-change-unit;
            @if ($font-size-change-unit == vw or $font-size-change-unit == vh or  $font-size-change-unit == vmin or $font-size-change-unit == vmax) {
                font-size: calc-unit($font-size);
            }
        }@else if(not $use-unit-px){
            //@warn '모바일전용:' $use-unit-px;
            font-size:  calc-unit($font-size);
        }@else{
           // @warn '기본  px 사용:' $use-unit-px 'font-size::' $font-size;
            font-size: $font-size;
        }
    }@else{
        // null
    }

    //line-height 적용
    @if($line-height != null and $line-height != ''){
        @if not unitless(nth($line-height, 1)) { //단위가 있다면?

            @if( length($line-height) > 1 ) {
                $lh-change-unit: nth($line-height, 2);
                @if ($lh-change-unit == vw or $lh-change-unit == vh or  $lh-change-unit == vmin or $lh-change-unit == vmax) {
                    line-height: calc-unit($line-height);
                }
            }@else{
                @if(not $use-unit-px){
                    line-height: calc-unit($line-height);
                }@else{
                    line-height: $line-height;
                }
            }
        }@else{
            line-height: $line-height;
        }
    }@else{
        // null
    }

    // 컬러값
    @if($color != null and $color != '' and type_of($color) == color){
        @if( type_of($alpha) == number ){
            $color: rgba($color, $alpha);
        }
        color:$color;
    }

}